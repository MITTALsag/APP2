Recommandations sur l'utilisation des fichiers pour l'APP2.
A lire absolument !


****************************************************************
**  Pour tout le monde                                        **
****************************************************************

Renseignez ici les noms des membres de votre binôme :

Nom1 - prénom1 : MITTAL Sagar

Si vous avez des commentaires, remarques etc. pour le rendu, vous pouvez les 
mettre ici:

Tous marche sauf suprise (logique) pour ce qui est des tests mémoires, il n'y a aycun leaks.
Tous les tests performances marchent sauf testnested a partir de la taille 2048000
Cette erreur est un satck oveflow du a de nombreus appelle récursif a cause de la structure de données choisis.
Cette erreur a était réglé lors de la deuxième version de ce projet qui fais appelle à des algos itératifs.

Complexité :
L'idée le la structure une fois initialisé est d'avoir une cellule pas type (char, int et groupe de commande)
Ce qui permet d'avoir toutes les fonction (Or fonction clone qui doivent cloner chaque élement, et detruireSeq) en O(1) par la suite car il suffit d'ajouster les poineteur.

La fonction conversion est en O(n) car elle parcours tous les element du texte une fois 

Analyse de graphique:

base : on voit que l'orsqu'il n'y a pas de blocle programme tourne en O(n) car temps(linéaire)
long : pareil pour quand il y a beacoup de bloc (non-imbriqué) ---> O(n)
nested : de meme quand les bloc sont imbriqué
memfree : de meme quand on boucle de nombreuse fois
piiile : De meme pour une pile tres grande 

Donc l'ensemble du programme est en O(n) (linéaire).


le seul souci sont les appelle récursif qui des qu'il sont trop grand fond des stack overflow
Une solution a laquelle j'ai pensee est de calculer le nobre max d'apelle récursif possible 
puis des qu'on en fais autant on dépile toute la stack avec une secession de return et puis on relance la fonction recussive.
Le souci de cette approche est le temps car cela en demade beaucoup de tout depiler puis re empiler.
(Solution tester avec un git branch mais pas viable). 


****************************************************************
**  Langage Python                                            **
****************************************************************

Utilisez (et modifiez) le script "run.py" fourni.
(Lire le debut de ce fichier pour une explication de comment lancer les tests.)


Pour les tests de performance : lire le fichier LISEZMOI-perfs.txt


****************************************************************
**  Langage C                                                 **
****************************************************************

Compilation
-----------
Pour compiler :
> make

ou

> clang -Wall -Wextra main.c -o main curiosity.c interprete.c listes.c
(Nous vous conseillons d'utiliser le compilateur clang plutôt que gcc.)


Lancer un test
--------------

Test complet
> ./main tests/<nom de test>.test

Test en mode "pas à pas" :
> ./main -d tests/<nom de test>.test


Lancer une suite de tests
-------------------------

Tests fonctionnels :
> ./tests/check.py c

Tests en vérifiant les erreurs ou fuites mémoire:
> ./tests/check.py --mem c

Pour les tests de performance : lire le fichier LISEZMOI-perfs.txt
